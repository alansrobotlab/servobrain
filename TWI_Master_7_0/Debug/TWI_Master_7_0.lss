
TWI_Master_7_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800100  00800100  00000638  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fce  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091c  00000000  00000000  00001fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a2  00000000  00000000  00002f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  68:	04 02       	muls	r16, r20
  6a:	3a 02       	muls	r19, r26
  6c:	d3 02       	muls	r29, r19
  6e:	d3 02       	muls	r29, r19
  70:	cc 01       	movw	r24, r24
  72:	f8 01       	movw	r30, r16
  74:	d3 02       	muls	r29, r19
  76:	d3 02       	muls	r29, r19
  78:	d3 02       	muls	r29, r19
  7a:	d3 02       	muls	r29, r19
  7c:	d3 02       	muls	r29, r19
  7e:	cc 01       	movw	r24, r24
  80:	d3 02       	muls	r29, r19
  82:	f4 01       	movw	r30, r8
  84:	d3 02       	muls	r29, r19
  86:	cc 01       	movw	r24, r24
  88:	fc 01       	movw	r30, r24
  8a:	d3 02       	muls	r29, r19
  8c:	5a 02       	muls	r21, r26
  8e:	cd 02       	muls	r28, r29
  90:	d3 02       	muls	r29, r19
  92:	72 02       	muls	r23, r18
  94:	d3 02       	muls	r29, r19
  96:	d3 02       	muls	r29, r19
  98:	d3 02       	muls	r29, r19
  9a:	d3 02       	muls	r29, r19
  9c:	d3 02       	muls	r29, r19
  9e:	d3 02       	muls	r29, r19
  a0:	d3 02       	muls	r29, r19
  a2:	d3 02       	muls	r29, r19
  a4:	d3 02       	muls	r29, r19
  a6:	d3 02       	muls	r29, r19
  a8:	00 02       	muls	r16, r16
  aa:	2e 02       	muls	r18, r30
  ac:	d3 02       	muls	r29, r19
  ae:	d3 02       	muls	r29, r19
  b0:	2a 02       	muls	r18, r26
  b2:	d3 02       	muls	r29, r19
  b4:	97 02       	muls	r25, r23
  b6:	d3 02       	muls	r29, r19
  b8:	d3 02       	muls	r29, r19
  ba:	d3 02       	muls	r29, r19
  bc:	d3 02       	muls	r29, r19
  be:	ec 01       	movw	r28, r24
  c0:	d3 02       	muls	r29, r19
  c2:	d3 02       	muls	r29, r19
  c4:	d3 02       	muls	r29, r19
  c6:	d3 02       	muls	r29, r19
  c8:	d3 02       	muls	r29, r19
  ca:	d0 01       	movw	r26, r0
  cc:	79 02       	muls	r23, r25
  ce:	c6 02       	muls	r28, r22

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d8 e0       	ldi	r29, 0x08	; 8
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a2 35       	cpi	r26, 0x52	; 82
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  f0:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <mod_led_init>:
 * Turn LED ON
 */
void mod_led_on()
{
	// Reverse logic for demo board use.
	DEV_LED_PORT &= ~(1<<DEV_LED_OUT_PIN);			// set LOW
  f8:	3a 9a       	sbi	0x07, 2	; 7
  fa:	08 95       	ret

000000fc <mod_led_toggle>:
 */
void mod_led_toggle(uint8_t val)
{
	uint8_t i;

	for(i=0; i<val; i++)
  fc:	88 23       	and	r24, r24
  fe:	41 f0       	breq	.+16     	; 0x110 <mod_led_toggle+0x14>
 100:	90 e0       	ldi	r25, 0x00	; 0
	{
		DEV_LED_PORT &= ~(1<<DEV_LED_OUT_PIN);			// set LOW
 102:	42 98       	cbi	0x08, 2	; 8
		asm("nop");
 104:	00 00       	nop
		DEV_LED_PORT |= (1<<DEV_LED_OUT_PIN);			// set HIGH
 106:	42 9a       	sbi	0x08, 2	; 8
		asm("nop");
 108:	00 00       	nop
 */
void mod_led_toggle(uint8_t val)
{
	uint8_t i;

	for(i=0; i<val; i++)
 10a:	9f 5f       	subi	r25, 0xFF	; 255
 10c:	89 13       	cpse	r24, r25
 10e:	f9 cf       	rjmp	.-14     	; 0x102 <mod_led_toggle+0x6>
 110:	08 95       	ret

00000112 <initbootuart>:


void initbootuart()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(MYUBRR>>8);
 112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)(MYUBRR);
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Double rate for finer baud resolution */
	UCSR0A = (1<<U2X0);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 122:	88 e1       	ldi	r24, 0x18	; 24
 124:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8bit Data, No Parity, 1stop bit (8N1) */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 12e:	08 95       	ret

00000130 <sendchar>:


void sendchar(char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	95 ff       	sbrs	r25, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <sendchar+0x4>
	;

	/* Put data into buffer, sends the data */
	UDR0 = data;
 13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13e:	08 95       	ret

00000140 <recchar>:


char recchar(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <recchar+0x4>
	;
	
	/* Get and return received data from buffer */
	return UDR0;
 14a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 14e:	08 95       	ret

00000150 <InitTWI>:
 * Simple Slave query to read back one or a few bytes.
 * Used for Lock bytes or Fuses.
 * void read_and_send(uint8_t cmd, uint8_t nbytes)
 */
void read_and_send(uint8_t whichversion)
{
 150:	87 b1       	in	r24, 0x07	; 7
 152:	8f 7c       	andi	r24, 0xCF	; 207
 154:	87 b9       	out	0x07, r24	; 7
 156:	88 b1       	in	r24, 0x08	; 8
 158:	8f 7c       	andi	r24, 0xCF	; 207
 15a:	88 b9       	out	0x08, r24	; 8
 15c:	88 e4       	ldi	r24, 0x48	; 72
 15e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 162:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 16c:	08 95       	ret

0000016e <MasterReceive>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	db 01       	movw	r26, r22
 174:	94 ea       	ldi	r25, 0xA4	; 164
 176:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 17a:	ec eb       	ldi	r30, 0xBC	; 188
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	99 23       	and	r25, r25
 182:	ec f7       	brge	.-6      	; 0x17e <MasterReceive+0x10>
 184:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 188:	98 30       	cpi	r25, 0x08	; 8
 18a:	09 f0       	breq	.+2      	; 0x18e <MasterReceive+0x20>
 18c:	48 c0       	rjmp	.+144    	; 0x21e <MasterReceive+0xb0>
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 19a:	ec eb       	ldi	r30, 0xBC	; 188
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	ec f7       	brge	.-6      	; 0x19e <MasterReceive+0x30>
 1a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	80 34       	cpi	r24, 0x40	; 64
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <MasterReceive+0x42>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	d1 f5       	brne	.+116    	; 0x228 <MasterReceive+0xba>
 1b4:	41 50       	subi	r20, 0x01	; 1
 1b6:	51 09       	sbc	r21, r1
 1b8:	c9 f0       	breq	.+50     	; 0x1ec <MasterReceive+0x7e>
 1ba:	9d 01       	movw	r18, r26
 1bc:	24 0f       	add	r18, r20
 1be:	35 1f       	adc	r19, r21
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	94 ec       	ldi	r25, 0xC4	; 196
 1c6:	69 eb       	ldi	r22, 0xB9	; 185
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	4b eb       	ldi	r20, 0xBB	; 187
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	90 83       	st	Z, r25
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	ec f7       	brge	.-6      	; 0x1d0 <MasterReceive+0x62>
 1d6:	eb 01       	movw	r28, r22
 1d8:	88 81       	ld	r24, Y
 1da:	80 35       	cpi	r24, 0x50	; 80
 1dc:	21 f5       	brne	.+72     	; 0x226 <MasterReceive+0xb8>
 1de:	ea 01       	movw	r28, r20
 1e0:	88 81       	ld	r24, Y
 1e2:	8d 93       	st	X+, r24
 1e4:	a2 17       	cp	r26, r18
 1e6:	b3 07       	cpc	r27, r19
 1e8:	91 f7       	brne	.-28     	; 0x1ce <MasterReceive+0x60>
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <MasterReceive+0x80>
 1ec:	9d 01       	movw	r18, r26
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f4:	ec eb       	ldi	r30, 0xBC	; 188
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	ec f7       	brge	.-6      	; 0x1f8 <MasterReceive+0x8a>
 1fe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	88 35       	cpi	r24, 0x58	; 88
 206:	09 f4       	brne	.+2      	; 0x20a <MasterReceive+0x9c>
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	88 35       	cpi	r24, 0x58	; 88
 20c:	49 f4       	brne	.+18     	; 0x220 <MasterReceive+0xb2>
 20e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 212:	f9 01       	movw	r30, r18
 214:	80 83       	st	Z, r24
 216:	84 e9       	ldi	r24, 0x94	; 148
 218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 21c:	01 c0       	rjmp	.+2      	; 0x220 <MasterReceive+0xb2>
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	91 11       	cpse	r25, r1
 222:	02 c0       	rjmp	.+4      	; 0x228 <MasterReceive+0xba>
 224:	04 c0       	rjmp	.+8      	; 0x22e <MasterReceive+0xc0>
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	84 e9       	ldi	r24, 0x94	; 148
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	91 11       	cpse	r25, r1
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <MasterTransmit>:
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	94 ea       	ldi	r25, 0xA4	; 164
 244:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 248:	ec eb       	ldi	r30, 0xBC	; 188
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	90 81       	ld	r25, Z
 24e:	99 23       	and	r25, r25
 250:	ec f7       	brge	.-6      	; 0x24c <MasterTransmit+0x12>
 252:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 256:	98 30       	cpi	r25, 0x08	; 8
 258:	09 f0       	breq	.+2      	; 0x25c <MasterTransmit+0x22>
 25a:	48 c0       	rjmp	.+144    	; 0x2ec <MasterTransmit+0xb2>
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 262:	84 e8       	ldi	r24, 0x84	; 132
 264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 268:	ec eb       	ldi	r30, 0xBC	; 188
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 23       	and	r24, r24
 270:	ec f7       	brge	.-6      	; 0x26c <MasterTransmit+0x32>
 272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	88 31       	cpi	r24, 0x18	; 24
 27a:	09 f4       	brne	.+2      	; 0x27e <MasterTransmit+0x44>
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	88 31       	cpi	r24, 0x18	; 24
 280:	d1 f5       	brne	.+116    	; 0x2f6 <MasterTransmit+0xbc>
 282:	41 50       	subi	r20, 0x01	; 1
 284:	51 09       	sbc	r21, r1
 286:	d1 f0       	breq	.+52     	; 0x2bc <MasterTransmit+0x82>
 288:	db 01       	movw	r26, r22
 28a:	9b 01       	movw	r18, r22
 28c:	24 0f       	add	r18, r20
 28e:	35 1f       	adc	r19, r21
 290:	4b eb       	ldi	r20, 0xBB	; 187
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	ec eb       	ldi	r30, 0xBC	; 188
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	94 e8       	ldi	r25, 0x84	; 132
 29a:	09 eb       	ldi	r16, 0xB9	; 185
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	8d 91       	ld	r24, X+
 2a0:	ea 01       	movw	r28, r20
 2a2:	88 83       	st	Y, r24
 2a4:	90 83       	st	Z, r25
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <MasterTransmit+0x6c>
 2ac:	e8 01       	movw	r28, r16
 2ae:	88 81       	ld	r24, Y
 2b0:	88 32       	cpi	r24, 0x28	; 40
 2b2:	01 f5       	brne	.+64     	; 0x2f4 <MasterTransmit+0xba>
 2b4:	bd 01       	movw	r22, r26
 2b6:	2a 17       	cp	r18, r26
 2b8:	3b 07       	cpc	r19, r27
 2ba:	89 f7       	brne	.-30     	; 0x29e <MasterTransmit+0x64>
 2bc:	fb 01       	movw	r30, r22
 2be:	80 81       	ld	r24, Z
 2c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2c4:	84 e8       	ldi	r24, 0x84	; 132
 2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ca:	ec eb       	ldi	r30, 0xBC	; 188
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 23       	and	r24, r24
 2d2:	ec f7       	brge	.-6      	; 0x2ce <MasterTransmit+0x94>
 2d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	88 32       	cpi	r24, 0x28	; 40
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <MasterTransmit+0xa6>
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	88 32       	cpi	r24, 0x28	; 40
 2e2:	29 f4       	brne	.+10     	; 0x2ee <MasterTransmit+0xb4>
 2e4:	84 e9       	ldi	r24, 0x94	; 148
 2e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <MasterTransmit+0xb4>
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	91 11       	cpse	r25, r1
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <MasterTransmit+0xbc>
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <MasterTransmit+0xc2>
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	84 e9       	ldi	r24, 0x94	; 148
 2f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	91 11       	cpse	r25, r1
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <BlockLoad>:
		} // end: switch()
	} // end: while(true)
} // end: main

unsigned char BlockLoad(unsigned int size, unsigned char mem)
{
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	if(!over_size_flag) // Check for file size to be less than maximum pages that can be programmed
 314:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <over_size_flag>
 318:	21 11       	cpse	r18, r1
 31a:	11 c0       	rjmp	.+34     	; 0x33e <BlockLoad+0x32>
	{
		if(mem == 'F')
 31c:	66 34       	cpi	r22, 0x46	; 70
 31e:	99 f4       	brne	.+38     	; 0x346 <BlockLoad+0x3a>
		{
			// Flash memory type.
			for (uint16_t i = 0; i < size; ++i)
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	99 f0       	breq	.+38     	; 0x34a <BlockLoad+0x3e>
 324:	cd e0       	ldi	r28, 0x0D	; 13
 326:	d1 e0       	ldi	r29, 0x01	; 1
 328:	8c 01       	movw	r16, r24
 32a:	03 5f       	subi	r16, 0xF3	; 243
 32c:	1e 4f       	sbci	r17, 0xFE	; 254
			{
				pageBuffer[i+2] = recchar();
 32e:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 332:	89 93       	st	Y+, r24
	if(!over_size_flag) // Check for file size to be less than maximum pages that can be programmed
	{
		if(mem == 'F')
		{
			// Flash memory type.
			for (uint16_t i = 0; i < size; ++i)
 334:	c0 17       	cp	r28, r16
 336:	d1 07       	cpc	r29, r17
 338:	d1 f7       	brne	.-12     	; 0x32e <BlockLoad+0x22>
			{
				pageBuffer[i+2] = recchar();
			}
			return '\r'; // Report programming OK
 33a:	8d e0       	ldi	r24, 0x0D	; 13
 33c:	07 c0       	rjmp	.+14     	; 0x34c <BlockLoad+0x40>
			return '?';
		}
	}
	else
	{
		over_size_flag=0;
 33e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <over_size_flag>
		return '?';
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	03 c0       	rjmp	.+6      	; 0x34c <BlockLoad+0x40>
			return '\r'; // Report programming OK
		}
		else
		{
			// Invalid memory type?
			return '?';
 346:	8f e3       	ldi	r24, 0x3F	; 63
 348:	01 c0       	rjmp	.+2      	; 0x34c <BlockLoad+0x40>
			// Flash memory type.
			for (uint16_t i = 0; i < size; ++i)
			{
				pageBuffer[i+2] = recchar();
			}
			return '\r'; // Report programming OK
 34a:	8d e0       	ldi	r24, 0x0D	; 13
	else
	{
		over_size_flag=0;
		return '?';
	}
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <main>:
	RTS_PORT_REG |= (1<<CTS_PIN);	// enable pull-up
	*/

	//_delay_ms(500);

	mod_led_init();
 356:	0e 94 7c 00 	call	0xf8	; 0xf8 <mod_led_init>

	InitTWI();
 35a:	0e 94 a8 00 	call	0x150	; 0x150 <InitTWI>
	
	initbootuart(); // Initialize UART.
 35e:	0e 94 89 00 	call	0x112	; 0x112 <initbootuart>
			 */
			case 'g':
 				temp_int = (recchar()<<8) | recchar();	// Get block size.
				val = recchar();						// Get mem type.
				// NOTE: Address was sent in 'A' command process.
				slaveCmdBuff[0] = CMD_GET_DATA;
 362:	0e e4       	ldi	r16, 0x4E	; 78
 364:	11 e0       	ldi	r17, 0x01	; 1
 366:	0f 2e       	mov	r0, r31
 368:	f3 e0       	ldi	r31, 0x03	; 3
 36a:	df 2e       	mov	r13, r31
 36c:	f0 2d       	mov	r31, r0
				sendchar('0');
				break;

			case 's':
				// Return signature bytes [for the Target device ATtiny85].
				slaveCmdBuff[0] = CMD_GET_SIG;
 36e:	68 94       	set
 370:	bb 24       	eor	r11, r11
 372:	b2 f8       	bld	r11, 2
				// Start block load.
				temp_int = (recchar()<<8) | recchar();	// Get block size.
				val = recchar();						// Get memtype.
				sendchar( BlockLoad(temp_int, val) );	// Block load.
// mod_led_toggle(4);			// Need a short delay here.
			 	pageBuffer[0] = CMD_RECV_DATA;					// Address was sent in 'A' command service.
 374:	68 94       	set
 376:	cc 24       	eor	r12, r12
 378:	c1 f8       	bld	r12, 1
	initbootuart(); // Initialize UART.

	/* Main loop */
	while(true)
	{
		val = recchar(); // Wait for command character.
 37a:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>

		switch(val) {
 37e:	48 2f       	mov	r20, r24
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	fa 01       	movw	r30, r20
 384:	e1 54       	subi	r30, 0x41	; 65
 386:	f1 09       	sbc	r31, r1
 388:	e4 33       	cpi	r30, 0x34	; 52
 38a:	f1 05       	cpc	r31, r1
 38c:	08 f0       	brcs	.+2      	; 0x390 <main+0x3a>
 38e:	0b c1       	rjmp	.+534    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 390:	ec 5c       	subi	r30, 0xCC	; 204
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__tablejump2__>
			case 'P':
			case 'L':
			case 'E':
				sendchar('\r');
 398:	8d e0       	ldi	r24, 0x0D	; 13
 39a:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 39e:	ed cf       	rjmp	.-38     	; 0x37a <main+0x24>
		
			// Read lock byte -> execute command
			case 'r':
				switch(command_char) {
 3a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <command_char>
 3a4:	84 36       	cpi	r24, 0x64	; 100
 3a6:	51 f0       	breq	.+20     	; 0x3bc <main+0x66>
 3a8:	20 f4       	brcc	.+8      	; 0x3b2 <main+0x5c>
 3aa:	81 56       	subi	r24, 0x61	; 97
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	80 f4       	brcc	.+32     	; 0x3d0 <main+0x7a>
 3b0:	e4 cf       	rjmp	.-56     	; 0x37a <main+0x24>
 3b2:	85 36       	cpi	r24, 0x65	; 101
 3b4:	41 f0       	breq	.+16     	; 0x3c6 <main+0x70>
 3b6:	86 36       	cpi	r24, 0x66	; 102
 3b8:	01 f3       	breq	.-64     	; 0x37a <main+0x24>
 3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <main+0x7a>
						read_and_send( TWI_CMD_BVERSION );
						break;

					case 'd':
						// Read CRCHI
						sendchar(CRC_HI);
 3bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <CRC_HI>
 3c0:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
						break;
 3c4:	da cf       	rjmp	.-76     	; 0x37a <main+0x24>

					case 'e':
						// Read CRCLO
						sendchar(CRC_LO);
 3c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <CRC_LO>
 3ca:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
						break;
 3ce:	d5 cf       	rjmp	.-86     	; 0x37a <main+0x24>
						// NOT SUPPORTED in new code.
						read_and_send(TWI_CMD_GETERRCONDN);
						break;

					default:
						sendchar(0xFF);
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
						break;
 3d6:	d1 cf       	rjmp	.-94     	; 0x37a <main+0x24>
				break;

			case 'l':
				// Write lock byte -> load command. NOT SUPPORTED in new code.
				// NOTE: This looks like a hijacked command to do a CRC check.
				command_char = recchar();
 3d8:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 3dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <command_char>
					CRC_HI= statusCode;
					read_from_slave();
					CRC_LO = statusCode;
				}
#endif
				sendchar('\r');
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 3e6:	c9 cf       	rjmp	.-110    	; 0x37a <main+0x24>

			case 'N':
				// Read high fuse bits -> BVERSION
				//read_and_send( TWI_CMD_BVERSION );
				sendchar(0);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 3ee:	c5 cf       	rjmp	.-118    	; 0x37a <main+0x24>

			case 'F':
				// Read Low Fuse Bits -> AVERSION
				//read_and_send( TWI_CMD_AVERSION );
				sendchar(0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 3f6:	c1 cf       	rjmp	.-126    	; 0x37a <main+0x24>

			case 'Q':
				// Read Extended Fuse Bits -> AVERSION
				//read_and_send( TWI_CMD_AVERSION );
				sendchar(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 3fe:	bd cf       	rjmp	.-134    	; 0x37a <main+0x24>

			case	'a':
				sendchar('Y'); // Yes, we do auto-increment.
 400:	89 e5       	ldi	r24, 0x59	; 89
 402:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 406:	b9 cf       	rjmp	.-142    	; 0x37a <main+0x24>

			case 'A':
				addr =(recchar()<<8) | recchar(); // Read address high and low byte.
 408:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 40c:	c8 2f       	mov	r28, r24
 40e:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 412:	2c 2f       	mov	r18, r28
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	32 2f       	mov	r19, r18
 418:	22 27       	eor	r18, r18
 41a:	a9 01       	movw	r20, r18
 41c:	48 2b       	or	r20, r24
 41e:	ca 01       	movw	r24, r20
 420:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <addr+0x1>
 424:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <addr>
				if(addr > MAX__APP_ADDR) over_size_flag = 1;
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	58 e1       	ldi	r21, 0x18	; 24
 42c:	95 07       	cpc	r25, r21
 42e:	18 f0       	brcs	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <over_size_flag>
				//+ 15mar17 ndp - send address to Slave.
				slaveCmdBuff[0] = CMD_RECV_ADRS;
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	f8 01       	movw	r30, r16
 43a:	20 83       	st	Z, r18
				slaveCmdBuff[1] = (uint8_t)((addr>>8) & 0x00FF);				// AH
 43c:	91 83       	std	Z+1, r25	; 0x01
				slaveCmdBuff[2] = (uint8_t)(addr & 0x00FF);						// AL
 43e:	82 83       	std	Z+2, r24	; 0x02
				(void) MasterTransmit( SLAVE_ADDRESS, slaveCmdBuff, 3 );
 440:	43 e0       	ldi	r20, 0x03	; 3
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	b8 01       	movw	r22, r16
 446:	80 eb       	ldi	r24, 0xB0	; 176
 448:	0e 94 1d 01 	call	0x23a	; 0x23a <MasterTransmit>
				//-
				sendchar('\r'); // Send OK back.
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 452:	93 cf       	rjmp	.-218    	; 0x37a <main+0x24>
				runApp[0] =  TWI_CMD_ERASEFLASH;
				runApp[1] =  TWI_CMD_ERASEFLASH;
				get_slave_status();
				success = MasterTransmit( SLAVE_ADDRESS, runApp, 2 );
#endif
				sendchar('\r'); // Send OK back.
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 45a:	8f cf       	rjmp	.-226    	; 0x37a <main+0x24>
		
			case 'b':
				// Check block load support.
				sendchar('Y'); // Report block load supported.
 45c:	89 e5       	ldi	r24, 0x59	; 89
 45e:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar((BLOCKSIZE>>8) & 0xFF); // MSB first.
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar(BLOCKSIZE&0xFF); // Report BLOCKSIZE (bytes).
 468:	80 e4       	ldi	r24, 0x40	; 64
 46a:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				over_size_flag = 0;		// ndp 1-29-2017 fix
 46e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <over_size_flag>
				break;
 472:	83 cf       	rjmp	.-250    	; 0x37a <main+0x24>
		
			case 'B':
				// Start block load.
				temp_int = (recchar()<<8) | recchar();	// Get block size.
 474:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 478:	c8 2f       	mov	r28, r24
 47a:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 47e:	d0 e0       	ldi	r29, 0x00	; 0
 480:	dc 2f       	mov	r29, r28
 482:	cc 27       	eor	r28, r28
 484:	c8 2b       	or	r28, r24
				val = recchar();						// Get memtype.
 486:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
				sendchar( BlockLoad(temp_int, val) );	// Block load.
 48a:	68 2f       	mov	r22, r24
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 86 01 	call	0x30c	; 0x30c <BlockLoad>
 492:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
// mod_led_toggle(4);			// Need a short delay here.
			 	pageBuffer[0] = CMD_RECV_DATA;					// Address was sent in 'A' command service.
 496:	eb e0       	ldi	r30, 0x0B	; 11
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	c0 82       	st	Z, r12
				pageBuffer[1] = (uint8_t)(temp_int & 0x00FF);	// NL..Only block size less than 256 supported.
 49c:	c1 83       	std	Z+1, r28	; 0x01
				// NOTE: Always sends PAGE_SIZE even if less data received from Host.
				success = MasterTransmit( SLAVE_ADDRESS, pageBuffer, pageBuffer[1]+2 );
 49e:	ae 01       	movw	r20, r28
 4a0:	55 27       	eor	r21, r21
 4a2:	4e 5f       	subi	r20, 0xFE	; 254
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	bf 01       	movw	r22, r30
 4a8:	80 eb       	ldi	r24, 0xB0	; 176
 4aa:	0e 94 1d 01 	call	0x23a	; 0x23a <MasterTransmit>
 4ae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <success>

				break;
 4b2:	63 cf       	rjmp	.-314    	; 0x37a <main+0x24>
		
			case 'S':
				// Return programmer identifier.
				sendchar('A'); // Return 'AVRBOOT'.
 4b4:	81 e4       	ldi	r24, 0x41	; 65
 4b6:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('V'); // Software identifier (aka programmer signature) is always 7 characters.
 4ba:	86 e5       	ldi	r24, 0x56	; 86
 4bc:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('R');
 4c0:	82 e5       	ldi	r24, 0x52	; 82
 4c2:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('B');
 4c6:	82 e4       	ldi	r24, 0x42	; 66
 4c8:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('O');
 4cc:	8f e4       	ldi	r24, 0x4F	; 79
 4ce:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('O');
 4d2:	8f e4       	ldi	r24, 0x4F	; 79
 4d4:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('T');
 4d8:	84 e5       	ldi	r24, 0x54	; 84
 4da:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				reps =0;
 4de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				break;
 4e2:	4b cf       	rjmp	.-362    	; 0x37a <main+0x24>
			case 'V':
				// Return software version.
				// NOTE: TODO Should implement in new code.
//				send_command(TWI_CMD_EXECUTEAPP);
				// Disable bootloader mode for slave
				sendchar('2');
 4e4:	82 e3       	ldi	r24, 0x32	; 50
 4e6:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar('0');
 4ea:	80 e3       	ldi	r24, 0x30	; 48
 4ec:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 4f0:	44 cf       	rjmp	.-376    	; 0x37a <main+0x24>

			case 's':
				// Return signature bytes [for the Target device ATtiny85].
				slaveCmdBuff[0] = CMD_GET_SIG;
 4f2:	f8 01       	movw	r30, r16
 4f4:	b0 82       	st	Z, r11
				(void) MasterTransmit( SLAVE_ADDRESS, slaveCmdBuff, 1 );
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	b8 01       	movw	r22, r16
 4fc:	80 eb       	ldi	r24, 0xB0	; 176
 4fe:	0e 94 1d 01 	call	0x23a	; 0x23a <MasterTransmit>
				mod_led_toggle(255);			// Need a short delay here to let Slave set up data.
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	0e 94 7e 00 	call	0xfc	; 0xfc <mod_led_toggle>
				(void) MasterReceive( SLAVE_ADDRESS, slaveCmdBuff, 3 );
 508:	43 e0       	ldi	r20, 0x03	; 3
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	b8 01       	movw	r22, r16
 50e:	80 eb       	ldi	r24, 0xB0	; 176
 510:	0e 94 b7 00 	call	0x16e	; 0x16e <MasterReceive>
				sendchar( slaveCmdBuff[2] );
 514:	f8 01       	movw	r30, r16
 516:	82 81       	ldd	r24, Z+2	; 0x02
 518:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar( slaveCmdBuff[1] );
 51c:	f8 01       	movw	r30, r16
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar( slaveCmdBuff[0] );
 524:	f8 01       	movw	r30, r16
 526:	80 81       	ld	r24, Z
 528:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 52c:	26 cf       	rjmp	.-436    	; 0x37a <main+0x24>
			 * Return Flash Data.
			 *
			 * TODO: Need to read from Slave.
			 */
			case 'g':
 				temp_int = (recchar()<<8) | recchar();	// Get block size.
 52e:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 532:	e8 2e       	mov	r14, r24
 534:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
 538:	f1 2c       	mov	r15, r1
 53a:	fe 2c       	mov	r15, r14
 53c:	ee 24       	eor	r14, r14
 53e:	e8 2a       	or	r14, r24
 540:	e7 01       	movw	r28, r14
				val = recchar();						// Get mem type.
 542:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
				// NOTE: Address was sent in 'A' command process.
				slaveCmdBuff[0] = CMD_GET_DATA;
 546:	f8 01       	movw	r30, r16
 548:	d0 82       	st	Z, r13
				slaveCmdBuff[1] = (uint8_t)(temp_int & 0x00FF);
 54a:	e1 82       	std	Z+1, r14	; 0x01
				(void) MasterTransmit( SLAVE_ADDRESS, slaveCmdBuff, 2 );
 54c:	42 e0       	ldi	r20, 0x02	; 2
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	b8 01       	movw	r22, r16
 552:	80 eb       	ldi	r24, 0xB0	; 176
 554:	0e 94 1d 01 	call	0x23a	; 0x23a <MasterTransmit>
				mod_led_toggle(200);			// Need a short delay here to let Slave set up data.
 558:	88 ec       	ldi	r24, 0xC8	; 200
 55a:	0e 94 7e 00 	call	0xfc	; 0xfc <mod_led_toggle>
				(void) MasterReceive( SLAVE_ADDRESS, pageBuffer, (temp_int & 0x00FF) );
 55e:	a7 01       	movw	r20, r14
 560:	55 27       	eor	r21, r21
 562:	6b e0       	ldi	r22, 0x0B	; 11
 564:	71 e0       	ldi	r23, 0x01	; 1
 566:	80 eb       	ldi	r24, 0xB0	; 176
 568:	0e 94 b7 00 	call	0x16e	; 0x16e <MasterReceive>

				for(int i=0; i<temp_int; ++i)
 56c:	cd 2b       	or	r28, r29
 56e:	09 f4       	brne	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 570:	04 cf       	rjmp	.-504    	; 0x37a <main+0x24>
 572:	cb e0       	ldi	r28, 0x0B	; 11
 574:	d1 e0       	ldi	r29, 0x01	; 1
 576:	a7 01       	movw	r20, r14
 578:	45 5f       	subi	r20, 0xF5	; 245
 57a:	5e 4f       	sbci	r21, 0xFE	; 254
 57c:	7a 01       	movw	r14, r20
				{
					sendchar( pageBuffer[i] );
 57e:	89 91       	ld	r24, Y+
 580:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				slaveCmdBuff[1] = (uint8_t)(temp_int & 0x00FF);
				(void) MasterTransmit( SLAVE_ADDRESS, slaveCmdBuff, 2 );
				mod_led_toggle(200);			// Need a short delay here to let Slave set up data.
				(void) MasterReceive( SLAVE_ADDRESS, pageBuffer, (temp_int & 0x00FF) );

				for(int i=0; i<temp_int; ++i)
 584:	ce 15       	cp	r28, r14
 586:	df 05       	cpc	r29, r15
 588:	d1 f7       	brne	.-12     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 58a:	f7 ce       	rjmp	.-530    	; 0x37a <main+0x24>
			case 't':
			    // avrdude butterfly is requesting a list of supported devices
				// Return first device supported
				// some old avr109 protocol, ignored by programmer
				// but required for avrdude butterfly
				sendchar(1);
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				sendchar(0);
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
				break;
 598:	f0 ce       	rjmp	.-544    	; 0x37a <main+0x24>
			case 'T':
				// avrdude butterfly is requesting a specific device type
				// to be programmed
				// some old avr109 protocol, ignored by programmer
				// but required for avrdude butterfly
				recchar();		//accept '1' transmitted above
 59a:	0e 94 a0 00 	call	0x140	; 0x140 <recchar>
				sendchar('\r'); // ack
 59e:	8d e0       	ldi	r24, 0x0D	; 13
 5a0:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>

				
				break;
 5a4:	ea ce       	rjmp	.-556    	; 0x37a <main+0x24>

			default:
				if(val != 0x1b) {                  // If not ESC, then it is unrecognized...
 5a6:	8b 31       	cpi	r24, 0x1B	; 27
 5a8:	09 f4       	brne	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5aa:	e7 ce       	rjmp	.-562    	; 0x37a <main+0x24>
					sendchar('?');
 5ac:	8f e3       	ldi	r24, 0x3F	; 63
 5ae:	0e 94 98 00 	call	0x130	; 0x130 <sendchar>
 5b2:	e3 ce       	rjmp	.-570    	; 0x37a <main+0x24>

000005b4 <__tablejump2__>:
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	05 90       	lpm	r0, Z+
 5ba:	f4 91       	lpm	r31, Z
 5bc:	e0 2d       	mov	r30, r0
 5be:	09 94       	ijmp

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
